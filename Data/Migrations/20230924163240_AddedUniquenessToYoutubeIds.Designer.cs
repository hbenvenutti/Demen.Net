// <auto-generated />
using System;
using Demen.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demen.Data.Migrations
{
    [DbContext(typeof(DemenContext))]
    [Migration("20230924163240_AddedUniquenessToYoutubeIds")]
    partial class AddedUniquenessToYoutubeIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demen.Data.Entities.ChannelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("thumbnail_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("YoutubeId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("youtube_id");

                    b.HasKey("Id")
                        .HasName("PK_channel_id");

                    b.HasIndex("YoutubeId")
                        .IsUnique()
                        .HasDatabaseName("IX_channel_youtube_id");

                    b.ToTable("channels", null, t =>
                        {
                            t.HasCheckConstraint("CK_channel_status", "status IN ('Active', 'Inactive', 'Deleted')");
                        });
                });

            modelBuilder.Entity("Demen.Data.Entities.EmailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("Personal")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_email_id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.ToTable("emails", null, t =>
                        {
                            t.HasCheckConstraint("CK_email_status", "status IN ('Active', 'Inactive', 'Deleted')");

                            t.HasCheckConstraint("CK_email_type", "type IN ('Personal', 'Corporate')");
                        });
                });

            modelBuilder.Entity("Demen.Data.Entities.ManagerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_manager_id");

                    b.ToTable("managers", null, t =>
                        {
                            t.HasCheckConstraint("CK_manager_status", "status IN ('Active', 'Inactive', 'Deleted')");
                        });
                });

            modelBuilder.Entity("Demen.Data.Entities.VideoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("external_id");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("YoutubeId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("youtube_id");

                    b.HasKey("Id")
                        .HasName("PK_video_id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("YoutubeId")
                        .IsUnique()
                        .HasDatabaseName("IX_video_youtube_id");

                    b.ToTable("videos", null, t =>
                        {
                            t.HasCheckConstraint("CK_video_status", "status IN ('Active', 'Inactive', 'Deleted')");
                        });
                });

            modelBuilder.Entity("Demen.Data.Entities.EmailEntity", b =>
                {
                    b.HasOne("Demen.Data.Entities.ManagerEntity", "Manager")
                        .WithMany("Emails")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_email_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Demen.Data.Entities.VideoEntity", b =>
                {
                    b.HasOne("Demen.Data.Entities.ChannelEntity", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_video_channel_id");

                    b.HasOne("Demen.Data.Entities.ManagerEntity", "Manager")
                        .WithMany("Videos")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_video_manager_id");

                    b.Navigation("Channel");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Demen.Data.Entities.ChannelEntity", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Demen.Data.Entities.ManagerEntity", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
